#!/bin/bash

# Utility Functions

vercmp() {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

highestVersion() {
	local HIGHEST_VERSION=''
	for f in "$1/*"; do
		local VERSION=`cat $f/VERSION`
		if [ $(vercmp $HIGHEST_VERSION $VERSION) = 2 ]; then
			HIGHEST_VERSION=$VERSION
		fi
	done
	return $HIGHEST_VERSION
}

localVersion() {
	local VERSION=`cat $1/VERSION`
	local REVISION=`cat $1/REVISION`
	echo "$VERSION.$REVISION"
}

onlineVersion() {
	local VERSION=`curl $1/VERSION`
	local REVISION=`curl $1/REVISION`
	echo "$VERSION.$REVISION"
}

needsUpdate() {
	if [ -f "$1" ]; then
		local LOCAL_VERSION=$(localVersion "$1")
		local ONLINE_VERSION=$(onlineVersion "$2/mango")
		local CMP=(vercmp $LOCAL_VERSION $ONLINE_VERSION)
		if [ CMP == 0 ]; then 
			return 1
		elif [ CMP == 1 ]; then
			return 1
		else
			return 0
		fi
	else
		return 0
	fi
}

proceed() {
	if [ $2 = true ]; then
		return 0
	else
		while true; do
			read -p "$1 [Y/n] " yn
			case $yn in
				[Nn]* ) return 1;;
				* ) return 0;;
			esac
		done
	fi
}

usage() {
	echo "install: $1"
	echo "  usage: install [-y] [channel]"
	echo ""
	echo "     -y: non-interactive mode, does not ask for confirmation before proceeding"
	echo "channel: the channel you wish to install mango from. Defaults to 'master'. Possible values could be 'beta' or 'development'"
	echo ""
}

# parse command line arguments
NON_INTERACTIVE_MODE=false
CHANNEL="master"
while getopts ":y" opt; do
	case $opt in
		y)
			NON_INTERACTIVE_MODE=true
		;;
		/?)
			usage "Invalid option: -$OPTARG"
			exit 1
		;;
		--) 
			break
		;;
	esac
done
shift $((OPTIND-1))
[ "$1" = "--" ] && shift
channel_op=($@)
if [ "$channel_op" != "" ]; then
	CHANNEL="$channel_op"
fi

# define installation variables
MANGO_SOURCE="https://github.com/jaderfeijo/mango-framework/archive/$CHANNEL.zip"
MANGO_SOURCE_RAW="https://raw.githubusercontent.com/jaderfeijo/mango-framework/$CHANNEL"
MANGO_INSTALL_PATH="/usr/lib/mango"
MANGO_BINARY_PATH="/usr/bin/mango"
MANGO_LIBRARY_FOLDER="library"
MANGO_TEMP_PATH="/var/tmp/mango"

# begin installation
if [ $NON_INTERACTIVE_MODE = false ]; then
	echo "===================================================================="
	echo "Mango Framework Installer"
	echo "===================================================================="
	echo "This script will install the '$CHANNEL' version of the"
	echo "Mango Framework in the following paths:"
	echo ""
	echo " $MANGO_INSTALL_PATH"
	echo " $MANGO_BINARY_PATH"
	echo ""
fi

# proceed confirmation
if proceed "Do you wish to proceed with the installation?" "$NON_INTERACTIVE_MODE"; then
	echo "* Checking currently installed version..."
	if needsUpdate "$MANGO_INSTALL_PATH" "$MANGO_SOURCE_RAW/mango"; then
		echo "* Downloading the latest framework..."
		mkdir "$MANGO_TEMP_PATH"
		curl -L "$MANGO_SOURCE" > "$MANGO_TEMP_PATH/mango-$CHANNEL.zip"
		unzip "$MANGO_TEMP_PATH/mango-$CHANNEL.zip" -d "$MANGO_TEMP_PATH"
		LOCAL_MANGO_PATH="$MANGO_TEMP_PATH/mango-framework-$CHANNEL/mango"
		
		echo "* Installing latest framework version..."
		if [ ! -d "$MANGO_INSTALL_PATH" ]; then
			mkdir "$MANGO_INSTALL_PATH"
		fi
		if [ ! -d "$MANGO_INSTALL_PATH/$MANGO_LIBRARY_FOLDER" ]; then
			mkdir "$MANGO_INSTALL_PATH/$MANGO_LIBRARY_FOLDER"
		fi
		cp -rf "$LOCAL_MANGO_PATH/*" "$MANGO_INSTALL_PATa"
		if [ ! -f "$MANGO_BINARY_PATH" ]; then
			ln -s "$MANGO_INSTALL_PATH/tools/mango" "$MANGO_BINARY_PATH"
		fi
		
		echo "* Cleaning up..."
		rm -r "$MANGO_TEMP_PATH"
		
		echo "===================================================================="
		echo "All done :-)"
		echo "===================================================================="
		echo "You can now use the 'mango' command:"
		echo ""
		echo " $ mango info"
		echo ""
		echo "If everything went well, the current version of the mango"
		echo "framework will be printed to the console"
		echo ""
		echo "Have fun!"
		echo ""
		echo "If you find this software useful please don't forget to donate!"
		echo ""
		echo "Bitcoin: 14j8rsDX238cxTgcW9EBDFK6eY43WA2P9V"
		echo "PayPal: jader.feijo@gmail.com"
		echo ""
		echo "Thank you for using Mango Framework!"
		echo ""
	else
		echo "Currently installed version is up to date!"
	fi
else
	echo "Aborted!"
fi

